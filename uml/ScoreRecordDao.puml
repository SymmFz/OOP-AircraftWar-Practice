@startuml
'https://plantuml.com/class-diagram

scale 4

!pragma sveglimit 65536

abstract class AbstractGame
{
    # scoreBoardService:ScoreBoardService
}

class EasyGame {
    + EasyGame(ScoreBoardService scoreBoardService)
}

class NormalGame {
    + NormalGame(ScoreBoardService scoreBoardService)
}

class HardGame {
    + HardGame(ScoreBoardService scoreBoardService)
}

AbstractGame <|-- EasyGame
AbstractGame <|-- NormalGame
AbstractGame <|-- HardGame

AbstractGame .right.> ScoreBoardService

class ScoreBoardService
{
    - {static} TIME_FORMATTER: DateTimeFormatter
    - dao: ScoreRecordDao
    - observers: List<ScoreRecordObserver>
    + ScoreBoardService(ScoreRecordDao dao)
    + addObserver(ScoreRecordObserver observer): void
    + removeObserver(ScoreRecordObserver observer): void
    - notifyObservers(GameDifficulty difficulty): void
    + addRecord(String player, int score, GameDifficulty difficulty): void
    + deleteRecordByIndex(int index, GameDifficulty difficulty): void
    + getScoreBoardColumnName(): String[]
    + getScoreBoardTableData(GameDifficulty difficulty): String[][]
    + printSingleScoreRecordByIndex(int index, GameDifficulty difficulty): void
    + printAllScoreRecord(GameDifficulty difficulty): void
    + printScoreBoardInConsole(GameDifficulty difficulty): void
}

ScoreBoardService .right.> ScoreRecordDao
ScoreBoardService o-down-> ScoreRecordObserver

interface ScoreRecordObserver
{
    + {abstract} onScoreRecordChanged(GameDifficulty difficulty): void
}

class ScoreBoardTableModel implements ScoreRecordObserver
{
    - scoreBoardService: ScoreBoardService
    - gameDifficulty: GameDifficulty
    - onDifficultyChangeCallback: Consumer<GameDifficulty>
    + ScoreBoardTableModel(ScoreBoardService scoreBoardService, GameDifficulty initialDifficulty)
    + setOnDifficultyChangeCallback(Consumer<GameDifficulty> callback): void
    + refreshData(GameDifficulty difficulty): void
    + getGameDifficulty(): GameDifficulty
    + onScoreRecordChanged(GameDifficulty difficulty): void
    + isCellEditable(int row, int column): boolean
}

ScoreBoardTableModel .up.> ScoreBoardService

enum GameDifficulty
{
    EASY
    NORMAL
    HARD
}

interface ScoreRecordDao
{
    + {abstract} getAllScoreRecords(GameDifficulty difficulty): List<ScoreRecord>
    + {abstract} getSingleScoreRecordByIndex(int index, GameDifficulty difficulty): ScoreRecord
    + {abstract} addRecord(ScoreRecord scoreRecord): void
    + {abstract} deleteRecordByIndex(int index, GameDifficulty difficulty): void
}

class ScoreRecordDaoImpl
{
    - {static} FILE_PATH: String = "scores.json" {readOnly}
    - {static} GSON: Gson {readOnly}
    - scoreRecordsByDifficulty: Map<GameDifficulty, List<ScoreRecord>> {readOnly}
    - {static} instance: ScoreRecordDaoImpl {readOnly}
    - ScoreRecordDaoImpl()
    + {static} getInstance(): ScoreRecordDaoImpl
    - saveToFile(): void
    - loadFromFile(): Map<GameDifficulty, List<ScoreRecord>>
    + getAllScoreRecords(GameDifficulty difficulty): List<ScoreRecord>
    + getSingleScoreRecordByIndex(int index, GameDifficulty difficulty): ScoreRecord
    + addRecord(ScoreRecord record): void
    + deleteRecordByIndex(int index, GameDifficulty difficulty): void
}

ScoreRecordDao <|..  ScoreRecordDaoImpl

class ScoreRecord
{
    - playerName: String
    - scores: int
    - recordTime: LocalDateTime
    - gameDifficulty: GameDifficulty
    + ScoreRecord()
    + ScoreRecord(String playerName, int scores, LocalDateTime recordTime, GameDifficulty gameDifficulty)
    + getScores(): int
    + setScores(int scores): void
    + getPlayerName(): String
    + setPlayerName(String playerName): void
    + getRecordTime(): LocalDateTime
    + setRecordTime(LocalDateTime recordTime): void
    + getGameDifficulty(): GameDifficulty
    + setGameDifficulty(GameDifficulty gameDifficulty): void
    + toString(): String
}

ScoreRecordDaoImpl -left-> ScoreRecord

@enduml