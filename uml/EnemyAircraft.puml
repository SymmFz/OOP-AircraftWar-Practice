@startuml
'https://plantuml.com/class-diagram

scale 4

class Game
{

}

Game ..> EnemyAircraft
Game ..> EnemyAircraftFactory


interface EnemyAircraftFactory
{
    + {abstract} createEnemyAircraft():EnemyAircraft
}

class MobEnemyFactory
{
    + createEnemyAircraft():EnemyAircraft
}

class EliteEnemyFactory
{
    + createEnemyAircraft():EnemyAircraft
}

class BossEnemyFactory
{
    + createEnemyAircraft():EnemyAircraft
}

class ElitePlusEnemyFactory
{
    + createEnemyAircraft():EnemyAircraft
}

EnemyAircraftFactory <|.. MobEnemyFactory
EnemyAircraftFactory <|.. EliteEnemyFactory
EnemyAircraftFactory <|.. BossEnemyFactory
EnemyAircraftFactory <|.. ElitePlusEnemyFactory

MobEnemyFactory ..> MobEnemy
EliteEnemyFactory ..> EliteEnemy
BossEnemyFactory ..> BossEnemy
ElitePlusEnemyFactory ..> ElitePlusEnemy

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + getLocationX():int
    + getLocationY():int
    + setLocation(double locationX, double locationY):void
    + getSpeedX():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}


abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # direction:int
    # shootNum:int
    # power:int
    # shootStrategy:ShootStrategy
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp, \n\
                       int direction, int shootNum, int power, ShootStrategy shootStrategy)
    + decreaseHp(int decrease):void
    + increaseHp(int increase):void
    + getHp():int
    + setStrategy(ShootStrategy strategy):void
    + shoot():List<BaseBullet>
 }

AbstractFlyingObject <|-- AbstractAircraft

abstract class EnemyAircraft {
    # itemDropChance:double
    # maxItemNum:int
    - {static} HEALING_ITEM_WEIGHT: int = 300 {readOnly}
    - {static} FIRE_POWER_UP_WEIGHT: int = 150 {readOnly}
    - {static} BOMB_ITEM_WEIGHT: int = 50 {readOnly}
    - {static} FIRE_POWER_UP_PLUS_WEIGHT: int = 100 {readOnly}
    - {static} TOTAL_WEIGHT: int = HEALING_ITEM_WEIGHT + FIRE_POWER_UP_WEIGHT + \n\
                             BOMB_ITEM_WEIGHT + FIRE_POWER_UP_PLUS_WEIGHT {readOnly}
    - {field} {static} RANDOM_INSTANCE: Random = new Random() {readOnly}
    + EnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp, \n\
                    int direction, int shootNum, int power, ShootStrategy shootStrategy, \n\
                    double itemDropChance, int maxItemNum)
    + dropItems():List<BaseItem>
}

AbstractAircraft <|-- EnemyAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
}

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
}


class BossEnemy {
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
}

class ElitePlusEnemy {
    + ElitePlusEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
}

EnemyAircraft <|-- MobEnemy
EnemyAircraft <|-- EliteEnemy
EnemyAircraft <|-- BossEnemy
EnemyAircraft <|-- ElitePlusEnemy

@enduml
