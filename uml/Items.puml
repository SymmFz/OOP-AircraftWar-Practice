@startuml
'https://plantuml.com/class-diagram


scale 3

!pragma sveglimit 65536

interface BombObserver {
    + updateOnBombExplosion():void
}

abstract class EnemyAircraft implements BombObserver {
    # itemDropChance:double
    # maxItemNum:int
    - {static} HEALING_ITEM_WEIGHT: int = 70 {readOnly}
    - {static} FIRE_POWER_UP_WEIGHT: int = 50 {readOnly}
    - {static} BOMB_ITEM_WEIGHT: int = 40 {readOnly}
    - {static} FIRE_POWER_UP_PLUS_WEIGHT: int = 30 {readOnly}
    - {static} DARTS_ITEM_WEIGHT: int = 20 {readOnly}
    - {static} TOTAL_WEIGHT: int = HEALING_ITEM_WEIGHT + FIRE_POWER_UP_WEIGHT + \n\
                             BOMB_ITEM_WEIGHT + FIRE_POWER_UP_PLUS_WEIGHT + DARTS_ITEM_WEIGHT {readOnly}
    - {field} {static} RANDOM_INSTANCE: Random = new Random() {readOnly}
    + EnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp, \n\
                    int direction, int shootNum, int power, ShootStrategy shootStrategy, \n\
                    double itemDropChance, int maxItemNum)
    + dropItems():List<BaseItem>
    + {abstract} getScoreNum():int
    + {abstract} updateOnBombExplosion():void
}

EnemyAircraft ..> BaseItem
EnemyAircraft ..> ItemFactory

interface ItemFactory
{
    + {abstract} createItem(int locationX, int locationY):BaseItem
}

class BombItemFactory
{
    + createItem(int locationX, int locationY):BaseItem
}

class HealingItemFactory
{
    + createItem(int locationX, int locationY):BaseItem
}

class FirePowerUpItemFactory
{
    + createItem(int locationX, int locationY):BaseItem
}

class FirePowerUpPlusItemFactory
{
    + createItem(int locationX, int locationY):BaseItem
}

class DartsItemFactory
{
    + createItem(int locationX, int locationY):BaseItem
}

ItemFactory <|.. BombItemFactory
ItemFactory <|.. HealingItemFactory
ItemFactory <|.. FirePowerUpItemFactory
ItemFactory <|.. FirePowerUpPlusItemFactory
ItemFactory <|.. DartsItemFactory

abstract class BaseItem {
    + BaseItem(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + {abstract} active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

class HealingItem {
    - {static} HEALING_AMOUNT: int = 30 {readOnly}
    + HealingItem(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

class FirePowerUpItem {
    - {static} DURATION_SECONDS: int = 8 {readOnly}
    + FirePowerUpItem(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

class BombItem {
    - bombExplosionObserver:List<BombObserver>
    + BombItem(int locationX, int locationY, int speedX, int speedY)
    + registerObserver(BombObserver observer):void
    + registerObserver(List<? extends BombObserver> observers):void
    + removeObserver(BombObserver observer):void
    + removeObserver(List<? extends BombObserver> observers):void
    - notifyObserver():void
    + active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

class FirePowerUpPlusItem {
    - {static} DURATION_SECONDS: int = 10 {readOnly}
    + FirePowerUpPlusItem (int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

class DartsItem {
    - {static} DURATION_SECONDS: int = 16 {readOnly}
    + DartsItem(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

BaseItem <|-- HealingItem
BaseItem <|-- FirePowerUpItem
BaseItem <|-- BombItem
BaseItem <|-- FirePowerUpPlusItem
BaseItem <|-- DartsItem

BombItemFactory ..> BombItem
HealingItemFactory ..> HealingItem
FirePowerUpItemFactory ..> FirePowerUpItem
FirePowerUpPlusItemFactory ..> FirePowerUpPlusItem
DartsItemFactory ..> DartsItem

@enduml
