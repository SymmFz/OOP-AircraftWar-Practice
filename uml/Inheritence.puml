@startuml
'https://plantuml.com/class-diagram

scale 2

!pragma sveglimit 262144

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + getLocationX():int
    + getLocationY():int
    + setLocation(double locationX, double locationY):void
    + getSpeedX():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}

abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # direction:int
    # shootNum:int
    # power:int
    # shootStrategy:ShootStrategy
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp, \n\
                       int direction, int shootNum, int power, ShootStrategy shootStrategy)
    + decreaseHp(int decrease):void
    + increaseHp(int increase):void
    + getHp():int
    + setStrategy(ShootStrategy strategy):void
    + shoot():List<BaseBullet>
 }


class HeroAircraft {
    - shootingStateTimer:ScheduledFuture<?>
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + {static} getInstance():HeroAircraft
    + {static} resetInstance():void
    + forward():void
    + upgradeShootingStrategyForPeriod(ShootStrategy newStrategy, int duration, \n\
                                        TimeUnit unit, ScheduledExecutorService executorService):void
}

class HeroAircraftHolder {
    - {static} heroAircraft:HeroAircraft
    ~ {static} reset():void
}

HeroAircraft *--> HeroAircraftHolder
HeroAircraftHolder .[norank].> HeroAircraft : holds instance

AbstractAircraft <|-- HeroAircraft

abstract class EnemyAircraft implements BombObserver {
    # itemDropChance:double
    # maxItemNum:int
    - {static} HEALING_ITEM_WEIGHT: int = 70 {readOnly}
    - {static} FIRE_POWER_UP_WEIGHT: int = 50 {readOnly}
    - {static} BOMB_ITEM_WEIGHT: int = 40 {readOnly}
    - {static} FIRE_POWER_UP_PLUS_WEIGHT: int = 30 {readOnly}
    - {static} DARTS_ITEM_WEIGHT: int = 20 {readOnly}
    - {static} TOTAL_WEIGHT: int = HEALING_ITEM_WEIGHT + FIRE_POWER_UP_WEIGHT + \n\
                             BOMB_ITEM_WEIGHT + FIRE_POWER_UP_PLUS_WEIGHT + DARTS_ITEM_WEIGHT {readOnly}
    - {field} {static} RANDOM_INSTANCE: Random = new Random() {readOnly}
    + EnemyAircraft(int locationX, int locationY, int speedX, int speedY, int hp, \n\
                    int direction, int shootNum, int power, ShootStrategy shootStrategy, \n\
                    double itemDropChance, int maxItemNum)
    + dropItems():List<BaseItem>
    + {abstract} getScoreNum():int
    + {abstract} updateOnBombExplosion():void
}

AbstractAircraft <|-- EnemyAircraft

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp, \n\
               int direction, int shootNum, int power, ShootStrategy shootStrategy, \n\
               double itemDropChance, int maxItemNum)
    + forward():void
    + getScoreNum():int
    + updateOnBombExplosion():void
}

class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp, \n\
                 int direction, int shootNum, int power, ShootStrategy shootStrategy, \n\
                 double itemDropChance, int maxItemNum)
    + forward():void
    + getScoreNum():int
    + updateOnBombExplosion():void
}


class BossEnemy {
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp, \n\
                int direction, int shootNum, int power, ShootStrategy shootStrategy, \n\
                double itemDropChance, int maxItemNum)
    + forward():void
    + getScoreNum():int
    + updateOnBombExplosion():void
}

class ElitePlusEnemy {
    + ElitePlusEnemy(int locationX, int locationY, int speedX, int speedY, int hp, \n\
                     int direction, int shootNum, int power, ShootStrategy shootStrategy, \n\
                     double itemDropChance, int maxItemNum)
    + forward():void
    + getScoreNum():int
    + updateOnBombExplosion():void
}

EnemyAircraft <|-- MobEnemy
EnemyAircraft <|-- EliteEnemy
EnemyAircraft <|-- BossEnemy
EnemyAircraft <|-- ElitePlusEnemy

abstract class BaseBullet implements BombObserver
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
    + updateOnBombExplosion():void
}

interface BombObserver {
    + updateOnBombExplosion():void
}

class GoldBullet {
    + GoldBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

class HeroDartsBullet {
    + HeroDartsBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

class HeroGreenBullet {
    + HeroGreenBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY, int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + updateOnBombExplosion():void
}

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet
BaseBullet <|-- GoldBullet
BaseBullet <|-- HeroDartsBullet
BaseBullet <|-- HeroGreenBullet

abstract class BaseItem {
    + BaseItem(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + {abstract} active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

class HealingItem {
    - {static} HEALING_AMOUNT: int = 30 {readOnly}
    + HealingItem(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

class FirePowerUpItem {
    - {static} DURATION_SECONDS: int = 8 {readOnly}
    + FirePowerUpItem(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

class BombItem {
    - bombExplosionObserver:List<BombObserver>
    + BombItem(int locationX, int locationY, int speedX, int speedY)
    + registerObserver(BombObserver observer):void
    + registerObserver(List<? extends BombObserver> observers):void
    + removeObserver(BombObserver observer):void
    + removeObserver(List<? extends BombObserver> observers):void
    - notifyObserver():void
    + active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

class FirePowerUpPlusItem {
    - {static} DURATION_SECONDS: int = 10 {readOnly}
    + FirePowerUpPlusItem (int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

class DartsItem {
    - {static} DURATION_SECONDS: int = 16 {readOnly}
    + DartsItem(int locationX, int locationY, int speedX, int speedY)
    + active(HeroAircraft heroAircraft, ScheduledExecutorService executorService):void
}

BaseItem <|-- HealingItem
BaseItem <|-- FirePowerUpItem
BaseItem <|-- BombItem
BaseItem <|-- FirePowerUpPlusItem
BaseItem <|-- DartsItem

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- BaseItem

@enduml
